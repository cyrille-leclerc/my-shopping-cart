name: webshop
services:
  frontend:
    labels:
      instrumentation.opentelemetry.io/inject-sdk: "true"
      resource.opentelemetry.io/service.name: "frontend"
      resource.opentelemetry.io/service.namespace: "${OTEL_SERVICE_NAMESPACE-shop}"
      resource.opentelemetry.io/service.version: "1.1"
      resource.opentelemetry.io/deployment.environment: "${OTEL_DEPLOYMENT_ENVIRONMENT_NAME-production}"
      resource.opentelemetry.io/deployment.environment.name: "${OTEL_DEPLOYMENT_ENVIRONMENT_NAME-production}"
    build:
      context: ./frontend
      dockerfile: ./Dockerfile
      platforms:
        - linux/amd64
        - linux/arm64
    deploy:
      mode: replicated
      replicas: 2
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      otel-collector:
        # todo rely on service_healthy instead of service_started. It doesn't work for the moment
        condition: service_started
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/ecommerce
      - SPRING_DATASOURCE_USERNAME=ecommerce
      - SPRING_DATASOURCE_PASSWORD=ecommerce
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - FRAUDDETECTIONSERVICE.BASEURL=http://fraud-detection:8081
      - CHECKOUTSERVICE.GRPCENDPOINT=checkout:50051
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_RABBITMQ_HOST=rabbitmq
      - OTEL_SERVICE_NAME=frontend
      - OTEL_RESOURCE_ATTRIBUTES=service.namespace=${OTEL_SERVICE_NAMESPACE-shop},service.version=1.1,deployment.environment.name=${OTEL_DEPLOYMENT_ENVIRONMENT_NAME-production},deployment.environment=${OTEL_DEPLOYMENT_ENVIRONMENT_NAME-production}
      - OTEL_SEMCONV_STABILITY_OPT_IN=http,database
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_INSTRUMENTATION_LOGBACK_APPENDER_EXPERIMENTAL_LOG_ATTRIBUTES=true
      - OTEL_INSTRUMENTATION_LOGBACK_APPENDER_EXPERIMENTAL_CAPTURE_KEY_VALUE_PAIR_ATTRIBUTES=true
      - OTEL_INSTRUMENTATION_MICROMETER_BASE_TIME_UNIT=s
      - OTEL_JAVA_EXPERIMENTAL_SPAN_ATTRIBUTES_COPY_FROM_BAGGAGE_INCLUDE=*
      - OTEL_JAVA_EXPERIMENTAL_LOG_ATTRIBUTES_COPY_FROM_BAGGAGE_INCLUDE=*
      - PYROSCOPE_APPLICATION_NAME=frontend
      - PYROSCOPE_LABELS="environment=${OTEL_DEPLOYMENT_ENVIRONMENT_NAME-production},namespace=${OTEL_SERVICE_NAMESPACE-shop}"
    ports:
      - "8079-8080:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
  fraud-detection:
    labels:
      instrumentation.opentelemetry.io/inject-sdk: "true"
      resource.opentelemetry.io/service.name: "fraud-detection"
      resource.opentelemetry.io/service.namespace: "${OTEL_SERVICE_NAMESPACE-shop}"
      resource.opentelemetry.io/service.version: "1.1"
      resource.opentelemetry.io/deployment.environment: "${OTEL_DEPLOYMENT_ENVIRONMENT_NAME-production}"
      resource.opentelemetry.io/deployment.environment.name: "${OTEL_DEPLOYMENT_ENVIRONMENT_NAME-production}"
    build:
      context: ./fraud-detection
      dockerfile: ./Dockerfile
      platforms:
        - linux/amd64
        - linux/arm64
    depends_on:
      postgres:
        condition: service_healthy
      otel-collector:
        condition: service_started
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/ecommerce
      - SPRING_DATASOURCE_USERNAME=ecommerce
      - SPRING_DATASOURCE_PASSWORD=ecommerce
      - SERVER_PORT=8081
      - OTEL_SERVICE_NAME=fraud-detection
      - OTEL_RESOURCE_ATTRIBUTES=service.namespace=${OTEL_SERVICE_NAMESPACE-shop},service.version=1.1,deployment.environment.name=${OTEL_DEPLOYMENT_ENVIRONMENT_NAME-production},deployment.environment=${OTEL_DEPLOYMENT_ENVIRONMENT_NAME-production}
      - OTEL_SEMCONV_STABILITY_OPT_IN=http,database
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_INSTRUMENTATION_LOGBACK_APPENDER_EXPERIMENTAL_LOG_ATTRIBUTES=true
      - OTEL_INSTRUMENTATION_LOGBACK_APPENDER_EXPERIMENTAL_CAPTURE_KEY_VALUE_PAIR_ATTRIBUTES=true
      - OTEL_INSTRUMENTATION_MICROMETER_BASE_TIME_UNIT=s
      - OTEL_JAVA_EXPERIMENTAL_SPAN_ATTRIBUTES_COPY_FROM_BAGGAGE_INCLUDE=*
      - OTEL_JAVA_EXPERIMENTAL_LOG_ATTRIBUTES_COPY_FROM_BAGGAGE_INCLUDE=*
    ports:
      - "8081:8081"
  checkout:
    labels:
      instrumentation.opentelemetry.io/inject-sdk: "true"
      resource.opentelemetry.io/service.name: "checkout"
      resource.opentelemetry.io/service.namespace: "${OTEL_SERVICE_NAMESPACE-shop}"
      resource.opentelemetry.io/service.version: "1.1"
      resource.opentelemetry.io/deployment.environment: "${OTEL_DEPLOYMENT_ENVIRONMENT_NAME-production}"
      resource.opentelemetry.io/deployment.environment.name: "${OTEL_DEPLOYMENT_ENVIRONMENT_NAME-production}"
    build:
      context: ./checkout
      dockerfile: ./Dockerfile
      platforms:
        - linux/amd64
        - linux/arm64
    depends_on:
      postgres:
        condition: service_healthy
      otel-collector:
        condition: service_started
    environment:
      - SHIPPING_SERVICE_URL=http://shipping:8088
      - OTEL_SERVICE_NAME=checkout
      - OTEL_RESOURCE_ATTRIBUTES=service.namespace=${OTEL_SERVICE_NAMESPACE-shop},service.version=1.1,deployment.environment.name=${OTEL_DEPLOYMENT_ENVIRONMENT_NAME-production},deployment.environment=${OTEL_DEPLOYMENT_ENVIRONMENT_NAME-production}
      - OTEL_SEMCONV_STABILITY_OPT_IN=http,database
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_INSTRUMENTATION_LOGBACK_APPENDER_EXPERIMENTAL_LOG_ATTRIBUTES=true
      - OTEL_INSTRUMENTATION_LOGBACK_APPENDER_EXPERIMENTAL_CAPTURE_KEY_VALUE_PAIR_ATTRIBUTES=true
      - OTEL_INSTRUMENTATION_MICROMETER_BASE_TIME_UNIT=s
      - OTEL_JAVA_EXPERIMENTAL_SPAN_ATTRIBUTES_COPY_FROM_BAGGAGE_INCLUDE=*
      - OTEL_JAVA_EXPERIMENTAL_LOG_ATTRIBUTES_COPY_FROM_BAGGAGE_INCLUDE=*
    ports:
      - "50051:50051"
  shipping:
    labels:
      instrumentation.opentelemetry.io/inject-sdk: "true"
      resource.opentelemetry.io/service.name: "shipping"
      resource.opentelemetry.io/service.namespace: "${OTEL_SERVICE_NAMESPACE-shop}"
      resource.opentelemetry.io/service.version: "1.1"
      resource.opentelemetry.io/deployment.environment: "${OTEL_DEPLOYMENT_ENVIRONMENT_NAME-production}"
      resource.opentelemetry.io/deployment.environment.name: "${OTEL_DEPLOYMENT_ENVIRONMENT_NAME-production}"
    build:
      context: ./shipping
      dockerfile: ./Dockerfile
      platforms:
        - linux/amd64
        - linux/arm64
    depends_on:
      postgres:
        condition: service_healthy
      otel-collector:
        condition: service_started
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/ecommerce
      - SPRING_DATASOURCE_USERNAME=ecommerce
      - SPRING_DATASOURCE_PASSWORD=ecommerce
      - SERVER_PORT=8088
      - OTEL_SERVICE_NAME=shipping
      - OTEL_RESOURCE_ATTRIBUTES=service.namespace=${OTEL_SERVICE_NAMESPACE-shop},service.version=1.1,deployment.environment.name=${OTEL_DEPLOYMENT_ENVIRONMENT_NAME-production},deployment.environment=${OTEL_DEPLOYMENT_ENVIRONMENT_NAME-production}
      - OTEL_SEMCONV_STABILITY_OPT_IN=http,database
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_INSTRUMENTATION_LOGBACK_APPENDER_EXPERIMENTAL_LOG_ATTRIBUTES=true
      - OTEL_INSTRUMENTATION_LOGBACK_APPENDER_EXPERIMENTAL_CAPTURE_KEY_VALUE_PAIR_ATTRIBUTES=true
      - OTEL_INSTRUMENTATION_MICROMETER_BASE_TIME_UNIT=s
      - OTEL_JAVA_EXPERIMENTAL_SPAN_ATTRIBUTES_COPY_FROM_BAGGAGE_INCLUDE=*
      - OTEL_JAVA_EXPERIMENTAL_LOG_ATTRIBUTES_COPY_FROM_BAGGAGE_INCLUDE=*
    ports:
      - "8088:8088"
  warehouse:
    labels:
      instrumentation.opentelemetry.io/inject-sdk: "true"
      resource.opentelemetry.io/service.name: "warehouse"
      resource.opentelemetry.io/service.namespace: "${OTEL_SERVICE_NAMESPACE-shop}"
      resource.opentelemetry.io/service.version: "1.1"
      resource.opentelemetry.io/deployment.environment: "${OTEL_DEPLOYMENT_ENVIRONMENT_NAME-production}"
      resource.opentelemetry.io/deployment.environment.name: "${OTEL_DEPLOYMENT_ENVIRONMENT_NAME-production}"
    build:
      context: ./warehouse
      dockerfile: ./Dockerfile
      platforms:
        - linux/amd64
        - linux/arm64
    #container_name: webshop-warehouse
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      otel-collector:
        condition: service_started
    environment:
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SERVER_PORT=8089
      - OTEL_SERVICE_NAME=warehouse
      - OTEL_RESOURCE_ATTRIBUTES=service.namespace=${OTEL_SERVICE_NAMESPACE-shop},service.version=1.1,deployment.environment.name=${OTEL_DEPLOYMENT_ENVIRONMENT_NAME-production},deployment.environment=${OTEL_DEPLOYMENT_ENVIRONMENT_NAME-production}
      - OTEL_SEMCONV_STABILITY_OPT_IN=http,database
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_INSTRUMENTATION_LOGBACK_APPENDER_EXPERIMENTAL_LOG_ATTRIBUTES=true
      - OTEL_INSTRUMENTATION_LOGBACK_APPENDER_EXPERIMENTAL_CAPTURE_KEY_VALUE_PAIR_ATTRIBUTES=true
      - OTEL_INSTRUMENTATION_MICROMETER_BASE_TIME_UNIT=s
      - OTEL_JAVA_EXPERIMENTAL_SPAN_ATTRIBUTES_COPY_FROM_BAGGAGE_INCLUDE=*
      - OTEL_JAVA_EXPERIMENTAL_LOG_ATTRIBUTES_COPY_FROM_BAGGAGE_INCLUDE=*
    ports:
      - "8089:8089"
  postgres:
    image: 'postgres:16-alpine'
    #container_name: webshop-postgres
    environment:
      - POSTGRES_USER=ecommerce
      - POSTGRES_PASSWORD=ecommerce
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER}" ]
      interval: 5s
      timeout: 2s
      retries: 3
  redis:
    image: 'redis:6-alpine'
    #container_name: webshop-redis
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 2s
      retries: 3
  rabbitmq:
    image: 'rabbitmq:4-management-alpine'
    #container_name: webshop-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: "rabbitmq-diagnostics -q status"
      #test: ["CMD", "curl", "-f", "http://guest:guest@localhost:15672/api/queues"]
      # health check : http://guest:guest@localhost:15672/api/healthchecks/node /
      interval: 5s
      timeout: 2s
      retries: 3
  otel-collector:
    # don't call it "otel-collector" because it would conflict with the otel-demo
    # https://opentelemetry.io/docs/collector/installation/#docker-compose
    image: ${COLLECTOR_CONTRIB_IMAGE-ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:0.125.0}
    #container_name: webshop-otel-collector
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - GRAFANA_CLOUD_INSTANCE_ID=${GRAFANA_CLOUD_INSTANCE_ID:?error}
      - GRAFANA_CLOUD_API_KEY=${GRAFANA_CLOUD_API_KEY:?error}
      - GRAFANA_CLOUD_OTLP_ENDPOINT=${GRAFANA_CLOUD_OTLP_ENDPOINT:?error}
    volumes:
      - ./docker-compose/otel-collector/otel-collector-config.yml:/etc/otelcol-contrib/config.yaml
    ports:
      - "1888:1888" # pprof extension
      - "8888:8888" # Prometheus metrics exposed by the Collector
      - "8889:8889" # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP http receiver
      - "55679:55679" # zpages extension
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/metrics"]
      interval: 10s
      timeout: 5s
      retries: 3
  k6-load-generator:
    image: 'grafana/k6:latest'
    #container_name: webshop-k6-load-generator
    volumes:
      - ./load-generator/src/main/k6/k6.js:/k6-load-generator.js
    command: run -e FRONTEND_URLS="http://frontend:8080"  /k6-load-generator.js
    depends_on:
      - frontend
      - fraud-detection
      - checkout
      - shipping

