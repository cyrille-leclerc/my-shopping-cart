receivers:
  filelog/fraud-detection-ndjson:
    # logback config
    #<encoder class="ch.qos.logback.classic.encoder.JsonEncoder">
    #   <withFormattedMessage>true</withFormattedMessage>
    #   <withMessage>false</withMessage>
    #   <withArguments>false</withArguments>
    #   <withSequenceNumber>false</withSequenceNumber>
    #   <withNanoseconds>false</withNanoseconds>
    #</encoder>
    #
    # debug
    # start_at: beginning
    include: [/Users/cyrilleleclerc/git/cyrille-leclerc/my-shopping-cart/fraud-detection/fraud-detection.ndjson.log]
    operators:
      - type: json_parser
        body: attributes.formattedMessage
        timestamp:
          # todo handle attributes.nanoseconds
          parse_from: attributes.timestamp
          layout_type: 'epoch'
          layout: 'ms'
        severity:
          parse_from: attributes.level
        trace:
          trace_id:
            parse_from: attributes.mdc.trace_id
          span_id:
            parse_from: attributes.mdc.span_id
          trace_flags:
            parse_from: attributes.mdc.trace_flags
        scope_name:
          parse_from: attributes.loggerName
      - id: move_thread_name
        type: move
        from: attributes.threadName
        to: attributes["thread.name"]
      - id: move_throwable_class_name
        type: move
        if: "attributes.throwable?.className != nil"
        from: attributes.throwable.className
        to: attributes["exception.type"]
      - id: move_throwable_message
        type: move
        if: "attributes.throwable?.message != nil"
        from: attributes.throwable.message
        to: attributes["exception.message"]
      # FIXME handle stack trace
      - id: remove_throwable_stack_trace
        type: remove
        if: "attributes.throwable?.stepArray != nil"
        field: attributes.throwable.stepArray
      - id: remove_throwable
        type: remove
        field: attributes.throwable
      - id: remove_logger_name
        type: remove
        field: attributes.loggerName
      - id: remove_timestamp
        type: remove
        field: attributes.timestamp
      - id: remove_level
        type: remove
        field: attributes.level
      - id: remove_span_id
        type: remove
        field: attributes.mdc.span_id
      - id: remove_trace_id
        type: remove
        field: attributes.mdc.trace_id
      - id: remove_trace_flags
        type: remove
        field: attributes.mdc.trace_flags
      - id: remove_context
        type: remove
        field: attributes.context
      - id: remove_formatted_message
        type: remove
        field: attributes.formattedMessage
      #- type: stdout
    resource:
      service.name: fraud-detection-ndjson
      service.namespace: ndjson_logs
      deployment.environment: production
  filelog/fraud-detection-raw:
    # logback config - same as Spring Boot default config + append trace_id and span_id
    # <encoder>
    #   <pattern>%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd'T'HH:mm:ss.SSSXXX}} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- %applicationName[%t] ${LOG_CORRELATION_PATTERN:-}%-40.40logger{39} : %m - trace_id=%mdc{trace_id}, span_id=%mdc{span_id}%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}</pattern>
    #   <charset>${FILE_LOG_CHARSET}</charset>
    # </encoder>
    # debug
    # start_at: beginning
    include: [/Users/cyrilleleclerc/git/cyrille-leclerc/my-shopping-cart/fraud-detection/fraud-detection.log]
    operators:
      - type: regex_parser
        regex: '(?P<timestamp>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}\+\d{2}:\d{2})\s*(?P<level>\S*)\s*(?P<pid>\d*)\s*--- \[(?P<thread>\S*)\] (?P<logger>\S*)\s*: (?P<message>.*) - trace_id=(?P<trace_id>[A-Za-z0-9]*), span_id=(?P<span_id>[A-Za-z0-9]*)'
        body: attributes.message
        timestamp:
          # TODO
          parse_from: attributes.timestamp
          # logback pattern: yyyy-MM-dd'T'HH:mm:ss.SSSXXX -- example=2024-04-17T10:10:47.715+02:00
          layout: '%Y-%m-%dT%H:%M:%S.%L%j'
        severity:
          parse_from: attributes.level
        trace:
          trace_id:
            parse_from: attributes.trace_id
          span_id:
            parse_from: attributes.span_id
        scope_name:
          parse_from: attributes.logger
      - id: move_thread_name
        type: move
        from: attributes.thread
        to: attributes["thread.name"]
      - id: remove_logger_name
        type: remove
        field: attributes.logger
      - id: remove_timestamp
        type: remove
        field: attributes.timestamp
      - id: remove_level
        type: remove
        field: attributes.level
      - id: remove_span_id
        type: remove
        field: attributes.span_id
      - id: remove_trace_id
        type: remove
        field: attributes.trace_id
      - id: remove_message
        type: remove
        field: attributes.message
      # TODO handle exception stack trace
      #- type: stdout
    resource:
      service.name: fraud-detection
      service.namespace: raw_logs
      deployment.environment: production

processors:
  batch:
  resourcedetection:
    detectors: ["env", "system"]
    override: false

extensions:
  basicauth/grafana_cloud_tempo:
    client_auth:
      username: "${env:GRAFANA_CLOUD_TEMPO_USERNAME}"
      password: "${env:GRAFANA_CLOUD_API_KEY}"
  basicauth/grafana_cloud_prometheus:
    client_auth:
      username: "${env:GRAFANA_CLOUD_PROMETHEUS_USERNAME}"
      password: "${env:GRAFANA_CLOUD_API_KEY}"
  basicauth/grafana_cloud_loki:
    client_auth:
      username: "${env:GRAFANA_CLOUD_LOKI_USERNAME}"
      password: "${env:GRAFANA_CLOUD_API_KEY}"

exporters:
  debug:
    verbosity: detailed
  otlp/grafana_cloud_traces:
    endpoint: "${env:GRAFANA_CLOUD_TEMPO_ENDPOINT}"
    auth:
      authenticator: basicauth/grafana_cloud_tempo

  loki/grafana_cloud_logs:
    # https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/lokiexporter/README.md
    endpoint: "${env:GRAFANA_CLOUD_LOKI_URL}"
    default_labels_enabled:
      # TODO Is it a best practice to use `level`as a loki label
      level: false
    auth:
      authenticator: basicauth/grafana_cloud_loki

  prometheusremotewrite/grafana_cloud_metrics:
    endpoint: "${env:GRAFANA_CLOUD_PROMETHEUS_URL}"
    auth:
      authenticator: basicauth/grafana_cloud_prometheus
    add_metric_suffixes: false



service:
  extensions: [basicauth/grafana_cloud_tempo, basicauth/grafana_cloud_prometheus, basicauth/grafana_cloud_loki]
  pipelines:
    logs:
      receivers: [filelog/fraud-detection-raw, filelog/fraud-detection-ndjson]
      processors: []
      exporters: [debug, loki/grafana_cloud_logs]
  telemetry:
    metrics:
      level: none