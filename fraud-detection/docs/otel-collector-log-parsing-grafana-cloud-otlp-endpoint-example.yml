receivers:
  filelog/fraud-detection-ndjson:
    # logback config
    # 1. add resource attributes to logback MDC
    # export OTEL_INSTRUMENTATION_COMMON_MDC_RESOURCE_ATTRIBUTES="service.name,service.namespace,service.instance.id,deployment.environment"
    # 2. configure logback appender
    #<encoder class="ch.qos.logback.classic.encoder.JsonEncoder">
    #   <withFormattedMessage>true</withFormattedMessage>
    #   <withMessage>false</withMessage>
    #   <withArguments>false</withArguments>
    #   <withSequenceNumber>false</withSequenceNumber>
    #   <withNanoseconds>false</withNanoseconds>
    #</encoder>
    #
    # debug
    # start_at: beginning
    include: [/Users/cyrilleleclerc/git/cyrille-leclerc/my-shopping-cart/fraud-detection/fraud-detection.ndjson.log]
    operators:
      - type: json_parser
        body: attributes.formattedMessage
        timestamp:
          # todo handle attributes.nanoseconds
          parse_from: attributes.timestamp
          layout_type: 'epoch'
          layout: 'ms'
        severity:
          parse_from: attributes.level
        trace:
          trace_id:
            parse_from: attributes.mdc.trace_id
          span_id:
            parse_from: attributes.mdc.span_id
          trace_flags:
            parse_from: attributes.mdc.trace_flags
        scope_name:
          parse_from: attributes.loggerName
      - id: move_service_namespace
        type: move
        if: 'attributes.mdc["service.namespace"] != nil'
        from: attributes.mdc["service.namespace"]
        to: resource["service.namespace"]
      - id: move_service_name
        type: move
        from: attributes.mdc["service.name"]
        to: resource["service.name"]
      - id: move_service_instance_id
        type: move
        if: 'attributes.mdc["service.instance.id"] != nil'
        from: attributes.mdc["service.instance.id"]
        to: resource["service.instance.id"]
      - id: move_deployment_environment
        type: move
        if: 'attributes.mdc["deployment.environment"] != nil'
        from: attributes.mdc["deployment.environment"]
        to: resource["deployment.environment"]
      - id: move_thread_name
        type: move
        from: attributes.threadName
        to: attributes["thread.name"]
      - id: move_throwable_class_name
        type: move
        if: "attributes.throwable?.className != nil"
        from: attributes.throwable.className
        to: attributes["exception.type"]
      - id: move_throwable_message
        type: move
        if: "attributes.throwable?.message != nil"
        from: attributes.throwable.message
        to: attributes["exception.message"]
      # FIXME "stepArray" is a json array eroding the visualization in Loki
      # [{ "className": "a.b.C", "methodName": "do", "fileName": "C.java", "lineNumber": 123},...]
      # It would help if logBack had a raw toString of the stack trace
      - id: move_throwable_stack_trace
        type: move
        if: "attributes.throwable?.stepArray != nil"
        from: attributes.throwable.stepArray
        to: attributes["exception.stacktrace"]
      - id: remove_throwable
        type: remove
        field: attributes.throwable
      - id: remove_logger_name
        type: remove
        field: attributes.loggerName
      - id: remove_timestamp
        type: remove
        field: attributes.timestamp
      - id: remove_level
        type: remove
        field: attributes.level
      - id: remove_span_id
        type: remove
        if: "attributes.mdc?.span_id != nil"
        field: attributes.mdc.span_id
      - id: remove_trace_id
        type: remove
        if: "attributes.mdc?.trace_id != nil"
        field: attributes.mdc.trace_id
      - id: remove_trace_flags
        type: remove
        if: "attributes.mdc?.trace_flags != nil"
        field: attributes.mdc.trace_flags
      - id: remove_context
        type: remove
        field: attributes.context
      - id: remove_formatted_message
        type: remove
        field: attributes.formattedMessage
      #- type: stdout # for debugging
  filelog/fraud-detection-raw:
    # logback config - same as Spring Boot default config + append trace_id and span_id
    # 1. add resource attributes to logback MDC
    # export OTEL_INSTRUMENTATION_COMMON_MDC_RESOURCE_ATTRIBUTES="service.name,service.namespace,service.instance.id,deployment.environment"
    # 2. configure logback appender
    # <encoder>
    #   <pattern>%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd'T'HH:mm:ss.SSSXXX}} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- %applicationName[%t] ${LOG_CORRELATION_PATTERN:-}%-40.40logger{39} : %m - trace_id=%mdc{trace_id}, span_id=%mdc{span_id}, service.name=%mdc{service.name}, service.namespace=%mdc{service.namespace}, service.instance.id=%mdc{service.instance.id}, deployment.environment=%mdc{deployment.environment}%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}</pattern>
    #   <charset>${FILE_LOG_CHARSET}</charset>
    # </encoder>
    #start_at: beginning #debug mode
    include:
    - /Users/cyrilleleclerc/git/cyrille-leclerc/my-shopping-cart/fraud-detection/fraud-detection.log
    multiline:
      line_start_pattern: '^\d{4}-\d{2}-\d{2}'
    operators:
      - type: regex_parser
        regex: '(?P<timestamp>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}\+\d{2}:\d{2})\s*(?P<level>\S*)\s*(?P<pid>\d*)\s*--- \[(?P<thread>\S*)\] (?P<logger>\S*)\s*: (?P<message>.*) - trace_id=(?P<trace_id>[A-Za-z0-9]*), span_id=(?P<span_id>[A-Za-z0-9]*), service.name=(?P<service_name>.*), service.namespace=(?P<service_namespace>\S*), service.instance.id=(?P<service_instance_id>\S*), deployment.environment=(?P<deployment_environment>\S*)(?P<throwable>(.|\s)*)'
        on_error: drop # TODO use 'drop_quiet' once available: https://github.com/open-telemetry/opentelemetry-collector-contrib/pull/32220
        body: attributes.message
        timestamp:
          parse_from: attributes.timestamp
          # logback pattern: yyyy-MM-dd'T'HH:mm:ss.SSSXXX
          # example=2024-04-17T10:10:47.715+02:00
          layout: '%Y-%m-%dT%H:%M:%S.%L%j'
        severity:
          parse_from: attributes.level
        trace:
          trace_id:
            parse_from: attributes.trace_id
          span_id:
            parse_from: attributes.span_id
        scope_name:
          parse_from: attributes.logger
      - id: move_service_namespace
        type: move
        if: 'attributes["service_namespace"] != nil'
        from: attributes["service_namespace"]
        to: resource["service.namespace"]
      - id: move_service_name
        type: move
        from: attributes["service_name"]
        to: resource["service.name"]
      - id: move_service_instance_id
        type: move
        if: 'attributes["service_instance_id"] != nil'
        from: attributes["service_instance_id"]
        to: resource["service.instance.id"]
      - id: move_deployment_environment
        type: move
        if: 'attributes["deployment_environment"] != nil'
        from: attributes["deployment_environment"]
        to: resource["deployment.environment"]
      - id: move_thread_name
        type: move
        from: attributes.thread
        to: attributes["thread.name"]
      - id: move_throwable_stack_trace
        type: move
        if: 'attributes["throwable"] != nil'
        from: attributes["throwable"]
        to: attributes["exception.stacktrace"]
      - id: remove_logger_name
        type: remove
        field: attributes.logger
      - id: remove_timestamp
        type: remove
        field: attributes.timestamp
      - id: remove_level
        type: remove
        field: attributes.level
      - id: remove_span_id
        if: 'attributes["span_id"] != nil'
        type: remove
        field: attributes.span_id
      - id: remove_trace_id
        if: 'attributes["trace_id"] != nil'
        type: remove
        field: attributes.trace_id
      - id: remove_message
        type: remove
        field: attributes.message
      # - type: stdout # for debugging
processors:
  batch:
  resourcedetection:
    detectors: ["env", "system"]
    override: false

exporters:
  debug:
    verbosity: detailed
  otlphttp/grafana_cloud:
    # https://github.com/open-telemetry/opentelemetry-collector/tree/main/exporter/otlpexporter
    endpoint: "${env:OTEL_EXPORTER_OTLP_ENDPOINT}"
    auth:
      authenticator: basicauth/grafana_cloud

extensions:
  basicauth/grafana_cloud:
    client_auth:
      username: "${env:GRAFANA_CLOUD_INSTANCE_ID}"
      password: "${env:GRAFANA_CLOUD_API_KEY}"


service:
  extensions: [basicauth/grafana_cloud]
  pipelines:
    logs:
      receivers: [filelog/fraud-detection-raw, filelog/fraud-detection-ndjson]
#      receivers: [filelog/fraud-detection-raw]
      processors: []
      exporters: [otlphttp/grafana_cloud]
  telemetry:
    metrics:
      level: none