spring.application.name=frontend

# app.datasource.jdbcUrl=jdbc:h2:mem:ecommercedb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false;MODE=PostgreSQL
# app.datasource.username=sa
# app.datasource.password=

# spring.jpa.show-sql=true

database=postgresql
spring.datasource.url=jdbc:postgresql://localhost:5432/test
spring.datasource.username=test
spring.datasource.password=test

# validate: validate the schema, makes no changes to the database.
# update: update the schema.
# create: creates the schema, destroying previous data.
# create-drop: drop the schema when the SessionFactory is closed explicitly, typically when the application is stopped.
# none: does nothing with the schema, makes no changes to the database
spring.jpa.hibernate.ddl-auto=update

spring.jmx.enabled=true
spring.jmx.default-domain=com.mycompany.frontend

# direct connection to the spring boot antifraud service: http://localhost:8081
# connection to the spring boot antifraud service via a reverse proxy (nginx): http://localhost:8082
antiFraudService.baseUrl=http://localhost:8081


management.endpoints.web.exposure.include=*,jolokia,prometheus,logfile

management.metrics.export.simple.enabled=true
management.metrics.export.prometheus.enabled=true
# https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-metrics-export-elastic
management.metrics.export.elastic.enabled=false
# management.metrics.export.elastic.host=http://localhost:9200
# management.metrics.export.elastic.userName=elastic
# management.metrics.export.elastic.password=elastic
# management.metrics.export.elastic.index=micrometer-metrics

server.tomcat.accesslog.enabled= true

logging.file.name=/usr/local/var/log/my-shopping-cart/frontend.log
