prometheus.integration.node_exporter {
	// https://grafana.com/docs/agent/latest/flow/reference/components/prometheus.integration.node_exporter/
	disable_collectors = [
	// disable on Apple Silicon
		"thermal"]
	// TODO migrate the relabel_configs block generated by the Grafana Cloud Integration in agent-config.yml
	//    relabel_configs:
    //      - replacement: cyrille-le-clerc-macbook
    //        source_labels:
    //          - agent_hostname
    //        target_label: instance
    //      - replacement: cyrillerclaptop
    //        source_labels:
    //          - agent_hostname
    //        target_label: instance
    //      - replacement: integrations/macos-node
    //        source_labels:
    //          - agent_hostname
    //        target_label: job
}

discovery.relabel "relabel_node_exporter_metrics" {
	// https://grafana.com/docs/agent/latest/flow/reference/components/discovery.relabel/
	// equivalent in .yml config: "metric_relabel_configs"
	targets = prometheus.integration.node_exporter.targets

    // rule generated by Grafana Cloud Integration
	rule {
		source_labels = ["__name__"]
		action        = "keep"
		regex         = "node_load1|node_filesystem_avail_bytes|node_disk_read_bytes_total|node_network_receive_drop_total|node_memory_compressed_bytes|node_memory_total_bytes|node_memory_wired_bytes|node_disk_written_bytes_total|node_memory_purgeable_bytes|node_textfile_scrape_error|node_memory_Cached_bytes|node_memory_Slab_bytes|node_memory_internal_bytes|node_network_transmit_packets_total|node_network_transmit_drop_total|node_disk_io_time_weighted_seconds_total|node_load5|node_filesystem_files|node_network_transmit_errs_total|node_memory_Buffers_bytes|node_network_receive_bytes_total|node_filesystem_size_bytes|node_load15|node_cpu_seconds_total|node_vmstat_pgmajfault|node_filesystem_files_free|node_network_receive_errs_total|node_network_receive_packets_total|node_memory_MemFree_bytes|node_memory_MemTotal_bytes|node_network_transmit_bytes_total|node_disk_io_time_seconds_total|node_uname_info|node_filesystem_readonly|node_memory_MemAvailable_bytes"
	}
}

prometheus.scrape "scrape_node" {
	// https://grafana.com/docs/agent/latest/flow/reference/components/prometheus.scrape/
	targets    = discovery.relabel.relabel_node_exporter_metrics.output // prometheus.integration.node_exporter.targets
	forward_to = [prometheus.relabel.default.receiver]
}

prometheus.relabel "default" {
	forward_to = [prometheus.remote_write.default.receiver]
}

prometheus.remote_write "default" {
	// https://grafana.com/docs/agent/latest/flow/reference/components/prometheus.remote_write/
	endpoint {
		url = env("PROMETHEUS_URL")

		http_client_config {
			basic_auth {
				username = env("PROMETHEUS_USERNAME")
				password = env("PROMETHEUS_PASSWORD")
			}
		}
	}
}

loki.write "default" {
    // https://grafana.com/docs/agent/latest/flow/reference/components/loki.write/
    endpoint {
        url = env("LOKI_URL")
        http_client_config {
            basic_auth {
                username = env("LOKI_USERNAME")
                password = env("LOKI_PASSWORD")
            }
        }
    }
}

otelcol.receiver.otlp "default" {
	// https://grafana.com/docs/agent/latest/flow/reference/components/otelcol.receiver.otlp/
	// OTEL COLLECTOR CONFIG FOR LOKI (WAITING FOR GRAFANA AGENT TO SUPPORT otelcol.processor.resource
	// processors:
    //   resource:
    //     attributes:
    //     - action: insert
    //       key: service_name
    //       from_attribute: service.name
    //     - action: insert
    //       key: service_namespace
    //       from_attribute: service.namespace
    //     - action: insert
    //       key: deployment_environment
    //       from_attribute: deployment.environment
    //     - action: insert
    //       key: loki.resource.labels
    //       value: service_namespace, service_name, deployment_environment
	grpc {
		endpoint = "0.0.0.0:4318"
	}

	output {
		metrics = [otelcol.processor.batch.default.input]
		logs    = [otelcol.processor.batch.default.input]
		traces  = [otelcol.processor.batch.default.input]
	}
}

otelcol.processor.batch "default" {
	// https://grafana.com/docs/agent/latest/flow/reference/components/otelcol.processor.batch/
	output {
		metrics = [otelcol.processor.memory_limiter.default.input]
		logs    = [otelcol.processor.memory_limiter.default.input]
		traces  = [otelcol.processor.memory_limiter.default.input]
	}
}

otelcol.processor.memory_limiter "default" {
	// https://grafana.com/docs/agent/latest/flow/reference/components/otelcol.processor.memory_limiter/
	check_interval = "1s"

	limit = "150MiB" // alternatively, set `limit_percentage` and `spike_limit_percentage`

	output {
		metrics = [otelcol.exporter.prometheus.default.input]
		logs    = [otelcol.exporter.loki.default.input]
		traces = [otelcol.exporter.otlp.grafana_cloud_tempo.input]
	}
}

otelcol.exporter.loki "default" {
    // https://grafana.com/docs/agent/latest/flow/reference/components/otelcol.exporter.loki/
	forward_to = [loki.write.default.receiver]
}

otelcol.exporter.prometheus "default" {
	// https://grafana.com/docs/agent/latest/flow/reference/components/otelcol.exporter.prometheus/
	forward_to = [prometheus.remote_write.default.receiver]
}

otelcol.exporter.otlp "grafana_cloud_tempo" {
	// https://grafana.com/docs/agent/latest/flow/reference/components/otelcol.exporter.otlp/
	client {
		endpoint = env("TEMPO_ENDPOINT")
		auth     = otelcol.auth.basic.grafana_cloud_tempo.handler
	}
}

otelcol.auth.basic "grafana_cloud_tempo" {
	// https://grafana.com/docs/agent/latest/flow/reference/components/otelcol.auth.basic/
	username = env("TEMPO_USERNAME")
	password = env("TEMPO_PASSWORD")
}
