# https://github.com/open-telemetry/opentelemetry-helm-charts/tree/main/charts/opentelemetry-kube-stack

clusterName: my-otel-stack
crds:
  installOtel: true
  installPrometheus: false # disable to prevent install of Prometheus  components
collectors:
  daemon:
    enabled: true
    env:
      - name: GRAFANA_CLOUD_INSTANCE_ID
        valueFrom:
          configMapKeyRef:
            name: grafana-cloud-config
            key: GRAFANA_CLOUD_INSTANCE_ID
      - name: GRAFANA_CLOUD_API_KEY
        valueFrom:
          configMapKeyRef:
            name: grafana-cloud-config
            key: GRAFANA_CLOUD_API_KEY
      - name: GRAFANA_CLOUD_OTLP_ENDPOINT
        valueFrom:
          configMapKeyRef:
            name: grafana-cloud-config
            key: GRAFANA_CLOUD_OTLP_ENDPOINT
    # disable scrapping using daemon_scrape_configs.yaml as it assumes the Prometheus Node Exporter and CAdvisor are setup
    # https://github.com/open-telemetry/opentelemetry-helm-charts/tree/main/charts/opentelemetry-kube-stack#scrape_configs_file-details
    scrape_configs_file: ""
    # Disable presets that require host access and cause issues on Docker Desktop
    presets:
      logsCollection:
        enabled: false # TODO enable. It's disabled on Docker Desktop
        storeCheckpoints: false # TODO enable. It's disabled on Docker Desktop.
      hostMetrics:
        enabled: false # TODO enable. It's disabled on Docker Desktop
      kubeletMetrics:
        enabled: true
      kubernetesAttributes:
        enabled: true
      kubernetesEvents:
        enabled: true
      clusterMetrics:
        enabled: true
    config:
      extensions:
        basicauth/grafana_cloud:
          client_auth:
            username: "${env:GRAFANA_CLOUD_INSTANCE_ID}"
            password: "${env:GRAFANA_CLOUD_API_KEY}"
        health_check: # For K8s Liveness and Readiness Probes
          endpoint: 0.0.0.0:13133
      exporters:
        otlphttp:
          endpoint: "${env:GRAFANA_CLOUD_OTLP_ENDPOINT}"
          auth:
            authenticator: basicauth/grafana_cloud
      service:
        extensions: [basicauth/grafana_cloud, health_check]
        pipelines:
          traces:
            receivers:
              - otlp
            processors:
              - resourcedetection/env
              - batch
            exporters:
              - otlphttp
          metrics:
            receivers:
              - otlp
            processors:
              - resourcedetection/env
              - batch
            exporters:
              - otlphttp
          logs:
            receivers:
              - otlp
            processors:
              - resourcedetection/env
              - batch
            exporters:
              - otlphttp
        telemetry:
          metrics:
            readers:
              - pull:
                  exporter:
                    prometheus:
                      host: '0.0.0.0'
                      port: 8888
          logs:
            level: info
    securityContext: # Run daemon collector as root for metrics & logs scrapping
      runAsUser: 0
      runAsGroup: 0
instrumentation:
  enabled: true
  env:
    - name: OTEL_EXPORTER_OTLP_PROTOCOL
      value: "grpc"
    - name: OTEL_K8S_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
  exporter:
    endpoint: http://opentelemetry-stack-daemon-collector:4317
  resource:
    resourceAttributes:
      deployment.environment.name: production
  propagators:
    - tracecontext
    - baggage
  sampler:
    type: parentbased_always_on # see https://opentelemetry.io/docs/languages/sdk-configuration/general/#otel_traces_sampler
  java:
    image: ghcr.io/open-telemetry/opentelemetry-operator/autoinstrumentation-java:2.20.0
    env:
    - name: OTEL_INSTRUMENTATION_LOGBACK_APPENDER_EXPERIMENTAL_CAPTURE_KEY_VALUE_PAIR_ATTRIBUTES
      value: "true"
    - name: OTEL_INSTRUMENTATION_LOGBACK_APPENDER_EXPERIMENTAL_LOG_ATTRIBUTES
      value: "true"
    - name: OTEL_INSTRUMENTATION_MICROMETER_BASE_TIME_UNIT
      value: s
    - name: OTEL_JAVA_EXPERIMENTAL_LOG_ATTRIBUTES_COPY_FROM_BAGGAGE_INCLUDE
      value: "*"
    - name: OTEL_JAVA_EXPERIMENTAL_SPAN_ATTRIBUTES_COPY_FROM_BAGGAGE_INCLUDE
      value: "*"
    - name: OTEL_SEMCONV_STABILITY_OPT_IN
      value: "http,database"
    - name: PYROSCOPE_LABELS
      value: "environment=production,namespace=ecommerce"
    - name: PYROSCOPE_SERVER_ADDRESS
      valueFrom:
        configMapKeyRef:
          name: grafana-cloud-config
          key: PYROSCOPE_SERVER_ADDRESS
    - name: PYROSCOPE_BASIC_AUTH_USER
      valueFrom:
        configMapKeyRef:
          name: grafana-cloud-config
          key: PYROSCOPE_BASIC_AUTH_USER
    - name: PYROSCOPE_BASIC_AUTH_PASSWORD
      valueFrom:
        configMapKeyRef:
          name: grafana-cloud-config
          key: PYROSCOPE_BASIC_AUTH_PASSWORD
    # don't duplicate app logs that are collected through OTLP, stop emitting them to stdout
    # Use SpringBoot CONSOLE_LOG_THRESHOLD=OFF to disable console logs
    - name: CONSOLE_LOG_THRESHOLD
      value: "OFF"

  python:
    env:
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: http://opentelemetry-stack-daemon-collector:4318
      - name: OTEL_EXPORTER_OTLP_PROTOCOL
        value: "http/protobuf"
opentelemetry-operator:
  admissionWebhooks:
    certManager:
      enabled: false # for production use cert-manager. See https://github.com/open-telemetry/opentelemetry-helm-charts/tree/main/charts/opentelemetry-operator#tls-certificate-requirement
    autoGenerateCert:
      enabled: true
      recreate: true # set to true when autoGenerateCert is enabled to prevent cert trust problems
defaultCRConfig:
  enabled: true
  image:
    repository: otel/opentelemetry-collector-contrib
  targetAllocator:
    enabled: false # For advanced use cases. See https://github.com/open-telemetry/opentelemetry-operator/tree/main/cmd/otel-allocator
  config: {} # TODO add shared config