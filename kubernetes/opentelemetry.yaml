---
apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: otel
  namespace: default
spec:
  mode: daemonset
  serviceAccount: opentelemetry-operator
  env:
    - name: GRAFANA_CLOUD_INSTANCE_ID
      valueFrom:
        configMapKeyRef:
          name: grafana-cloud-config
          key: GRAFANA_CLOUD_INSTANCE_ID
    - name: GRAFANA_CLOUD_API_KEY
      valueFrom:
        configMapKeyRef:
          name: grafana-cloud-config
          key: GRAFANA_CLOUD_API_KEY
    - name: GRAFANA_CLOUD_OTLP_ENDPOINT
      valueFrom:
        configMapKeyRef:
          name: grafana-cloud-config
          key: GRAFANA_CLOUD_OTLP_ENDPOINT
    - name: K8S_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
  config:
    extensions:
      basicauth/grafana_cloud:
        # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/extension/basicauthextension
        client_auth:
          username: "${env:GRAFANA_CLOUD_INSTANCE_ID}"
          password: "${env:GRAFANA_CLOUD_API_KEY}"
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
      hostmetrics:
        # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/hostmetricsreceiver
        scrapers:
          load: {}
          memory: {}
          cpu: {}
      kubeletstats:
        auth_type: "serviceAccount"
        endpoint: "${env:K8S_NODE_NAME}:10250"
        insecure_skip_verify: true
      filelog:
        # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/filelogreceiver
        exclude:
          - /var/log/pods/kube-system_*/*/*.log
        include:
          - /var/log/pods/*/*/*.log
        include_file_path: true
        operators:
          - id: container-parser
            type: container
            add_metadata_from_filepath: true
    processors:
      batch: {}
      transform:
        # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/transformprocessor
        error_mode: ignore
        log_statements:
          - set(resource.attributes["k8s.cluster.name"], "prod-eu-west-1-cluster")
          - set(resource.attributes["deployment.environment"], "production")
          - set(resource.attributes["deployment.environment.name"], "production")
        metric_statements:
          - set(resource.attributes["k8s.cluster.name"], "prod-eu-west-1-cluster")
          - set(resource.attributes["deployment.environment"], "production")
          - set(resource.attributes["deployment.environment.name"], "production")
        trace_statements:
          - set(resource.attributes["k8s.cluster.name"], "prod-eu-west-1-cluster")
          - set(resource.attributes["deployment.environment"], "production")
          - set(resource.attributes["deployment.environment.name"], "production")
      resourcedetection:
        detectors:
          - system
          - k8snode
        system:
          resource_attributes:
            host.name:
              enabled: false
      k8sattributes:
        extract:
          metadata:
            - k8s.cluster.uid
            - k8s.cronjob.name
            - k8s.daemonset.name
            - k8s.daemonset.uid
            - k8s.deployment.name
            - k8s.deployment.uid
            - k8s.job.name
            - k8s.job.uid
            - k8s.namespace.name
            - k8s.node.name
            - k8s.pod.hostname
            - k8s.pod.ip
            - k8s.pod.name
            - k8s.pod.start_time
            - k8s.pod.uid
            - k8s.replicaset.name
            - k8s.replicaset.uid
            - k8s.statefulset.name
            - k8s.statefulset.uid
            - container.image.name
            - container.image.tag
        filter:
          node_from_env_var: K8S_NODE_NAME
        passthrough: false
        pod_association:
          - sources:
              - from: resource_attribute
                name: k8s.pod.ip
          - sources:
              - from: resource_attribute
                name: k8s.pod.uid
          - sources:
              - from: connection
    connectors:
      grafanacloud:
        host_identifiers: [ "k8s.node.uid", "k8s.node.name", "host.id", "host.name", "container.id" ]

    exporters:
      debug:
        verbosity: detailed
      otlphttp/grafana_cloud:
        # https://github.com/open-telemetry/opentelemetry-collector/tree/main/exporter/otlpexporter
        endpoint: "${env:GRAFANA_CLOUD_OTLP_ENDPOINT}"
        auth:
          authenticator: basicauth/grafana_cloud
      prometheus:
        endpoint: "0.0.0.0:8889"
        resource_to_telemetry_conversion:
          enabled: true

    service:
      extensions: [basicauth/grafana_cloud]
      pipelines:
        traces:
          receivers: [otlp]
          processors: [transform, k8sattributes, resourcedetection, batch]
          exporters: [grafanacloud, otlphttp/grafana_cloud]
        metrics:
          receivers: [otlp, hostmetrics, kubeletstats, grafanacloud]
          processors: [transform, k8sattributes, resourcedetection, batch]
          exporters: [otlphttp/grafana_cloud, prometheus]
        logs:
          receivers: [otlp, filelog]
          processors: [transform, k8sattributes, resourcedetection, batch]
          exporters: [otlphttp/grafana_cloud]
    telemetry:
      metrics:
        readers:
          - pull:
              exporter:
                prometheus:
                  host: '0.0.0.0'
                  port: 8888
  volumeMounts:
    - name: varlogpods
      mountPath: /var/log/pods
      readOnly: true
    - name: varlibdockercontainers
      mountPath: /var/lib/docker/containers
      readOnly: true
  volumes:
    - name: varlogpods
      hostPath:
        path: /var/log/pods
    - name: varlibdockercontainers
      hostPath:
        path: /var/lib/docker/containers
---
apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: otel-collector-central
  namespace: default
spec:
  mode: deployment
  serviceAccount: opentelemetry-operator
  env:
    - name: GRAFANA_CLOUD_INSTANCE_ID
      valueFrom:
        configMapKeyRef:
          name: grafana-cloud-config
          key: GRAFANA_CLOUD_INSTANCE_ID
    - name: GRAFANA_CLOUD_API_KEY
      valueFrom:
        configMapKeyRef:
          name: grafana-cloud-config
          key: GRAFANA_CLOUD_API_KEY
    - name: GRAFANA_CLOUD_OTLP_ENDPOINT
      valueFrom:
        configMapKeyRef:
          name: grafana-cloud-config
          key: GRAFANA_CLOUD_OTLP_ENDPOINT
    - name: K8S_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    - name: OTEL_RESOURCE_ATTRIBUTES
      value: node.name=\$(K8S_NODE_NAME)
  config:
    exporters:
      debug:
        verbosity: detailed
      otlphttp/grafana_cloud:
        # https://github.com/open-telemetry/opentelemetry-collector/tree/main/exporter/otlpexporter
        endpoint: "${env:GRAFANA_CLOUD_OTLP_ENDPOINT}"
        auth:
          authenticator: basicauth/grafana_cloud
      prometheus:
        endpoint: "0.0.0.0:8890"
        resource_to_telemetry_conversion:
            enabled: true
    extensions:
      basicauth/grafana_cloud:
        # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/extension/basicauthextension
        client_auth:
          username: "${env:GRAFANA_CLOUD_INSTANCE_ID}"
          password: "${env:GRAFANA_CLOUD_API_KEY}"
    processors:
      batch: {}
      transform:
        # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/transformprocessor
        error_mode: ignore
        log_statements:
          - set(resource.attributes["k8s.cluster.name"], "prod-eu-west-1-cluster")
          - set(resource.attributes["deployment.environment"], "production")
          - set(resource.attributes["deployment.environment.name"], "production")
        metric_statements:
          - set(resource.attributes["k8s.cluster.name"], "prod-eu-west-1-cluster")
          - set(resource.attributes["deployment.environment"], "production")
          - set(resource.attributes["deployment.environment.name"], "production")
        trace_statements:
          - set(resource.attributes["k8s.cluster.name"], "prod-eu-west-1-cluster")
          - set(resource.attributes["deployment.environment"], "production")
          - set(resource.attributes["deployment.environment.name"], "production")
      k8sattributes:
        extract:
          metadata:
            - k8s.cluster.uid
            - k8s.cronjob.name
            - k8s.daemonset.name
            - k8s.daemonset.uid
            - k8s.deployment.name
            - k8s.deployment.uid
            - k8s.job.name
            - k8s.job.uid
            - k8s.namespace.name
            - k8s.node.name
            - k8s.pod.hostname
            - k8s.pod.ip
            - k8s.pod.name
            - k8s.pod.start_time
            - k8s.pod.uid
            - k8s.replicaset.name
            - k8s.replicaset.uid
            - k8s.statefulset.name
            - k8s.statefulset.uid
            - container.image.name
            - container.image.tag
        filter:
          node_from_env_var: K8S_NODE_NAME
        passthrough: false
        pod_association:
          - sources:
              - from: resource_attribute
                name: k8s.pod.ip
          - sources:
              - from: resource_attribute
                name: k8s.pod.uid
          - sources:
              - from: connection
    receivers:
      k8s_events:
        namespaces: [default]
      k8s_cluster:
        # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/k8sclusterreceiver
        collection_interval: 1m
        node_conditions_to_report:
          - Ready
          - MemoryPressure
        allocatable_types_to_report:
          - cpu
          - memory
      k8sobjects:
        # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/k8sobjectsreceiver
        objects:
          - name: events
            mode: watch
            group: events.k8s.io
      postgresql:
        endpoint: postgres:5432
        transport: tcp
        username: "ecommerce"
        password: "ecommerce"
        databases:
          - ecommerce
        tls:
          insecure: true
      redis:
        endpoint: "redis:6379"
        collection_interval: 10s
      rabbitmq:
        endpoint: http://rabbitmq:15672
        username: guest
        password: guest
        collection_interval: 10s
    service:
      extensions: [basicauth/grafana_cloud]
      pipelines:
        metrics:
          receivers: [k8s_cluster, postgresql, redis, rabbitmq]
          processors: [transform, k8sattributes, batch]
          exporters: [otlphttp/grafana_cloud, prometheus]
        logs:
          receivers: [k8s_events, k8sobjects, postgresql]
          processors: [transform, k8sattributes, batch]
          exporters: [otlphttp/grafana_cloud, debug]

---
# https://github.com/open-telemetry/opentelemetry-operator/blob/main/docs/api/instrumentations.md
apiVersion: opentelemetry.io/v1alpha1
kind: Instrumentation
metadata:
  name: otel-instrumentation
spec:
  exporter:
    endpoint: http://otel-collector:4317
  sampler:
    type: "parentbased_always_on"
  java:
    env:
      - name: OTEL_EXPORTER_OTLP_PROTOCOL
        value: "grpc"
      - name: OTEL_INSTRUMENTATION_LOGBACK_APPENDER_EXPERIMENTAL_CAPTURE_KEY_VALUE_PAIR_ATTRIBUTES
        value: "true"
      - name: OTEL_INSTRUMENTATION_LOGBACK_APPENDER_EXPERIMENTAL_LOG_ATTRIBUTES
        value: "true"
      - name: OTEL_INSTRUMENTATION_MICROMETER_BASE_TIME_UNIT
        value: s
      - name: OTEL_JAVA_EXPERIMENTAL_LOG_ATTRIBUTES_COPY_FROM_BAGGAGE_INCLUDE
        value: "*"
      - name: OTEL_JAVA_EXPERIMENTAL_SPAN_ATTRIBUTES_COPY_FROM_BAGGAGE_INCLUDE
        value: "*"
      - name: OTEL_SEMCONV_STABILITY_OPT_IN
        value: "http,database"
      - name: PYROSCOPE_LABELS
        value: "environment=production,namespace=ecommerce"
      - name: PYROSCOPE_SERVER_ADDRESS
        valueFrom:
          configMapKeyRef:
            name: grafana-cloud-config
            key: PYROSCOPE_SERVER_ADDRESS
      - name: PYROSCOPE_BASIC_AUTH_USER
        valueFrom:
          configMapKeyRef:
            name: grafana-cloud-config
            key: PYROSCOPE_BASIC_AUTH_USER
      - name: PYROSCOPE_BASIC_AUTH_PASSWORD
        valueFrom:
          configMapKeyRef:
            name: grafana-cloud-config
            key: PYROSCOPE_BASIC_AUTH_PASSWORD
      # don't duplicate app logs that are collected through OTLP, stop emitting them to stdout
      # Use SpringBoot CONSOLE_LOG_THRESHOLD=OFF to disable console logs
      - name: CONSOLE_LOG_THRESHOLD
        value: "OFF"

