#!/usr/bin/env bash
# set -x

##########################################################################################
# PARENT DIRECTORY
# code copied from Tomcat's `catalina.sh`
##########################################################################################
# resolve links - $0 may be a softlink
PRG="$0"

while [ -h "$PRG" ]; do
  ls=$(ls -ld "$PRG")
  link=$(expr "$ls" : '.*-> \(.*\)$')
  if expr "$link" : '/.*' > /dev/null; then
    PRG="$link"
  else
    PRG=$(dirname "$PRG")/"$link"
  fi
done

# Get standard environment variables
PRGDIR=$(dirname "$PRG")

# LOAD ENVIRONMENT VARIABLES
if [ -r "$PRGDIR/../setenv.sh" ]; then
  . "$PRGDIR/../setenv.sh"
else
  . "$PRGDIR/../setenv.default.sh"
fi
if [ -r "$PRGDIR/setenv.sh" ]; then
  . "$PRGDIR/setenv.sh"
fi

export OPEN_TELEMETRY_AGENT_HOME=$PRGDIR/../.otel
mkdir -p "$OPEN_TELEMETRY_AGENT_HOME"

##########################################################################################
# DOWNLOAD OPEN TELEMETRY AGENT IF NOT FOUND
# code copied from Maven Wrappers's mvnw`
##########################################################################################
export OPEN_TELEMETRY_AGENT_JAR=$OPEN_TELEMETRY_AGENT_HOME/opentelemetry-javaagent-$OPEN_TELEMETRY_AGENT_VERSION.jar
if [ -r "$OPEN_TELEMETRY_AGENT_JAR" ]; then
    echo "Found $OPEN_TELEMETRY_AGENT_JAR"
else
    echo "Couldn't find $OPEN_TELEMETRY_AGENT_JAR, downloading it ..."
    jarUrl="https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/download/v$OPEN_TELEMETRY_AGENT_VERSION/opentelemetry-javaagent.jar"
    if command -v wget > /dev/null; then
        wget "$jarUrl" -O "$OPEN_TELEMETRY_AGENT_JAR"
    elif command -v curl > /dev/null; then
        curl -L --max-redirs 5 -o "$OPEN_TELEMETRY_AGENT_JAR" "$jarUrl"
    else
        echo "FAILURE: OpenTelemetry agent not found and  none of curl and wget found"
        exit 1;
    fi
fi

$PRGDIR/../mvnw -DskipTests package

echo "##########################"
echo "# START CHECKOUT SERVICE #"
echo "##########################"
echo ""
echo "OTEL_EXPORTER_OTLP_ENDPOINT: $OTEL_EXPORTER_OTLP_ENDPOINT"
echo ""

OTEL_RESOURCE_ATTRIBUTES="service.name=checkout,service.namespace=shop,service.version=1.1,deployment.environment.name=staging"
OTEL_RESOURCE_ATTRIBUTES="$OTEL_RESOURCE_ATTRIBUTES,mycie.env=production"

export OTEL_RESOURCE_ATTRIBUTES
export OTEL_PROPAGATORS="tracecontext,jaeger,baggage"
# don't pull service.name from the resource attributes as ECS already sets it
export OTEL_INSTRUMENTATION_COMMON_MDC_RESOURCE_ATTRIBUTES="service.namespace,service.instance.id,deployment.environment.name"

## ECS Logger Appender uses SERVICE_NAME
export SERVICE_NAME="checkout"

export OTEL_LOGS_EXPORTER="experimental-otlp/stdout"

# see https://opentelemetry.io/docs/zero-code/java/spring-boot-starter/out-of-the-box-instrumentation/

java -javaagent:$PRGDIR/../.otel/opentelemetry-javaagent-$OPEN_TELEMETRY_AGENT_VERSION.jar \
     -Dotel.javaagent.extensions=$PRGDIR/../otel-javaagent-extensions/target/otel-javaagent-extensions-1.1-SNAPSHOT.jar \
     -Dotel.instrumentation.logback-appender.experimental-log-attributes=true \
     -Dotel.instrumentation.logback-appender.experimental.capture-key-value-pair-attributes=true \
     -Dotel.instrumentation.logback-appender.experimental.capture-mdc-attributes=* \
     -Dotel.instrumentation.logback-mdc.add-baggage=true \
     -Dotel.instrumentation.micrometer.base-time-unit=s \
     -Dotel.java.experimental.span-attributes.copy-from-baggage.include=* \
     -Dotel.java.experimental.log-attributes.copy-from-baggage.include=* \
     -Dotel.semconv-stability.opt-in=http/dup \
     -DshippingServiceUrl="http://shipping.local:8088/" \
     -jar target/checkout-1.1-SNAPSHOT.jar

